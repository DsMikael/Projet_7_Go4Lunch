// This file was generated by PermissionsDispatcher. Do not modify!
package com.mdasilva.go4lunch.ui.view;

import androidx.annotation.NonNull;
import androidx.core.app.ActivityCompat;
import java.lang.Override;
import java.lang.String;
import java.lang.ref.WeakReference;
import permissions.dispatcher.PermissionRequest;
import permissions.dispatcher.PermissionUtils;

final class HomeActivityPermissionsDispatcher {
  private static final int REQUEST_ASKPERMISSIONS = 0;

  private static final String[] PERMISSION_ASKPERMISSIONS = new String[] {"android.permission.ACCESS_FINE_LOCATION","android.permission.ACCESS_COARSE_LOCATION"};

  private HomeActivityPermissionsDispatcher() {
  }

  static void askPermissionsWithPermissionCheck(@NonNull HomeActivity target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_ASKPERMISSIONS)) {
      target.askPermissions();
    } else {
      if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_ASKPERMISSIONS)) {
        target.askRationalePermissions(new HomeActivityAskPermissionsPermissionRequest(target));
      } else {
        ActivityCompat.requestPermissions(target, PERMISSION_ASKPERMISSIONS, REQUEST_ASKPERMISSIONS);
      }
    }
  }

  static void onRequestPermissionsResult(@NonNull HomeActivity target, int requestCode,
      int[] grantResults) {
    switch (requestCode) {
      case REQUEST_ASKPERMISSIONS:
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.askPermissions();
      } else {
        if (!PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_ASKPERMISSIONS)) {
          target.askNeverPermissions();
        } else {
          target.askDeniedPermissions();
        }
      }
      break;
      default:
      break;
    }
  }

  private static final class HomeActivityAskPermissionsPermissionRequest implements PermissionRequest {
    private final WeakReference<HomeActivity> weakTarget;

    private HomeActivityAskPermissionsPermissionRequest(@NonNull HomeActivity target) {
      this.weakTarget = new WeakReference<HomeActivity>(target);
    }

    @Override
    public void proceed() {
      HomeActivity target = weakTarget.get();
      if (target == null) return;
      ActivityCompat.requestPermissions(target, PERMISSION_ASKPERMISSIONS, REQUEST_ASKPERMISSIONS);
    }

    @Override
    public void cancel() {
      HomeActivity target = weakTarget.get();
      if (target == null) return;
      target.askDeniedPermissions();
    }
  }
}
